interface
#if ! defined(IN_RPN_COMM_barrier)

      SUBROUTINE RPN_COMM_barrier(com,ierr) 
      implicit none                    
      integer, intent(OUT) :: ierr
      character(len=*), intent(IN) ::  com
      end SUBROUTINE RPN_COMM_barrier

      integer function RPN_COMM_barrier_data(level,values,nvalues)
      integer , intent(IN) :: level
      integer , intent(IN) :: nvalues
      real(kind=kind(1.d0)), dimension(nvalues), intent(OUT) :: values
      end function RPN_COMM_barrier_data              
#endif
#if ! defined(IN_RPN_COMM_colors)

      integer function RPN_COMM_colors(comm)         
      implicit none             
      character(len=*) :: comm
      end function RPN_COMM_colors
#endif
#if ! defined(IN_RPN_COMM_comm)

      integer function RPN_COMM_comm(com)
      implicit none                                 
      character(len=*), intent(IN) :: com
      end function RPN_COMM_comm                         
#endif
#if ! defined(IN_RPN_COMM_finalize)

      SUBROUTINE RPN_COMM_finalize(ierr)
      implicit none
      integer, intent(OUT) ::  ierr
      end SUBROUTINE RPN_COMM_finalize
#endif
#if ! defined(IN_RPN_COMM_init)


      SUBROUTINE RPN_COMM_init(Userinit,Pelocal,Petotal,Pex,Pey)
      implicit none     
      integer, intent(out)   :: Pelocal,Petotal
      integer, intent(inout) :: Pex,Pey                      
      external Userinit                              
      end SUBROUTINE RPN_COMM_init

      INTEGER FUNCTION RPN_COMM_init_multigrid   &
         (Userinit,Pelocal,Petotal,Pex,Pey,MultiGrids)
      implicit none               
      external :: Userinit
      integer, intent(out)   :: Pelocal,Petotal
      integer, intent(inout) :: Pex,Pey
      integer, intent(in)    :: MultiGrids
      end FUNCTION RPN_COMM_init_multigrid

      INTEGER FUNCTION RPN_COMM_init_multi_level &
         (Userinit,Pelocal,Petotal,Pex,Pey,MultiGrids,Grids)
      implicit none         
      external :: Userinit
      integer, intent(out)   :: Pelocal,Petotal
      integer, intent(inout) :: Pex,Pey
      integer, intent(in)    :: MultiGrids
      integer, intent(in)    :: Grids
      end FUNCTION RPN_COMM_init_multi_level
      integer function RPN_COMM_get_a_free_unit_x()
      end function RPN_COMM_get_a_free_unit_x
      function RPN_COMM_set_timeout_alarm_x(seconds) result(seconds_since)
      integer, intent(IN) :: seconds
      integer :: seconds_since
      end function RPN_COMM_set_timeout_alarm_x
#endif
#if ! defined(IN_RPN_COMM_limit)

      integer function RPN_COMM_limit_2 &
         (my_id, npe, gmin, gmax, lmini,lmaxi,count, offset,relax)
      implicit none
      integer, intent(IN) ::  my_id, npe, gmin, gmax, relax
      integer, intent(OUT) :: lmini,lmaxi
      integer, intent(OUT) :: count(npe),offset(npe)
      end function RPN_COMM_limit_2      

      integer function RPN_COMM_limit  &
         (my_id, npe, gmin, gmax, lmini, lmaxi,count, offset)
      implicit none
      integer, intent(IN) ::  my_id, npe, gmin, gmax
      integer, intent(OUT) :: lmini,lmaxi
      integer, intent(OUT) :: count(npe),offset(npe)
      end function RPN_COMM_limit
#endif
#if ! defined(IN_RPN_COMM_low2up)

      SUBROUTINE RPN_COMM_UP2LOW(S1,S2)
      implicit none
      character (len=*), intent(IN) :: S1
      character (len=*), intent(OUT) :: S2
      END SUBROUTINE RPN_COMM_UP2LOW
#endif
#if ! defined(IN_RPN_COMM_rank)

      SUBROUTINE RPN_COMM_rank( com, rank ,ierr )
      implicit none
      character(len=*),intent(in) :: com
      integer, intent(out) :: rank
      integer, intent(out) :: ierr
      end SUBROUTINE RPN_COMM_rank
#endif
#if ! defined(IN_RPN_COMM_size)

      SUBROUTINE RPN_COMM_size( com, size ,ierr )
      implicit none
      integer, intent(OUT) :: ierr,size
      character(len=*), intent(IN) ::  com
      end SUBROUTINE RPN_COMM_size
#endif
#if ! defined(IN_RPN_MPI_cube_topo)
      subroutine RPN_MPI_cube_topo(topo, npe, npex, npey, blkx, blky, x_first, ierr)
      import :: RPN_MPI_Fcube
      type(RPN_MPI_Fcube), intent(INOUT) :: topo
      integer, intent(IN) :: npe
      integer, intent(IN) :: npex, npey
      integer, intent(IN) :: blkx, blky
      logical, intent(IN) :: x_first
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_cube_topo
      subroutine RPN_MPI_init_cube(topo, ierr)
      import :: RPN_MPI_Fcube
      type(RPN_MPI_Fcube), intent(INOUT) :: topo
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_init_cube
#endif
#if ! defined(IN_RPN_MPI_distribute)

      subroutine RPN_data_distribute(myrank, npe, gmin, gmax, lmin, lmax, count, offset, mode)
      implicit none
      integer, intent(IN) ::  myrank, npe, gmin, gmax
      integer, intent(OUT) :: lmin, lmax
      integer, intent(OUT) :: count(npe), offset(npe)
      integer, intent(IN), optional ::  mode
      end subroutine RPN_data_distribute
#endif
#if ! defined(IN_RPN_MPI_ez_halo_exchange)
      subroutine RPN_MPI_halo(g,minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy,row,col) BIND(C,name='RPN_MPI_halo')
      import :: RPN_MPI_Loc, RPN_MPI_Comm, C_INT
      integer(C_INT), intent(IN)    :: minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy
      type(RPN_MPI_Comm), intent(IN) :: row,col
      type(RPN_MPI_Loc), intent(IN), value :: g
      end subroutine RPN_MPI_halo
      subroutine RPN_MPI_halo_8(g,minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy,row,col) BIND(C,name='RPN_MPI_halo_8')
      import :: RPN_MPI_Loc, RPN_MPI_Comm, C_INT
      integer(C_INT), intent(IN)    :: minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy
      type(RPN_MPI_Comm), intent(IN) :: row,col
      type(RPN_MPI_Loc), intent(IN), value :: g
      end subroutine RPN_MPI_halo_8 
      subroutine RPN_MPI_ez_halo(g,minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy) bind(C,name='RPN_MPI_ez_halo')
      import :: RPN_MPI_Loc, C_INT
      integer(C_INT), intent(IN)    :: minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy
      type(RPN_MPI_Loc), intent(IN), value :: g
      end subroutine RPN_MPI_ez_halo
      subroutine RPN_MPI_ez_halo_8(g,minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy) bind(C,name='RPN_MPI_ez_halo_8')
      import :: RPN_MPI_Loc, C_INT
      integer(C_INT), intent(IN)    :: minx,maxx,miny,maxy,lni,lnj,nk,halox,haloy
      type(RPN_MPI_Loc), intent(IN), value :: g
      end subroutine RPN_MPI_ez_halo_8
      function RPN_MPI_get_halo_timings(t,n) result(nt) BIND(C,name='RPN_MPI_get_halo_timings')
      import :: C_LONG_LONG, C_INT
      integer(C_INT), intent(IN) :: n
      integer(C_LONG_LONG), dimension(n), intent(OUT) :: t
      integer(C_INT) :: nt
      end function RPN_MPI_get_halo_timings
      subroutine RPN_MPI_reset_halo_timings() BIND(C,name='RPN_MPI_reset_halo_timings')
      end subroutine RPN_MPI_reset_halo_timings   
      subroutine RPN_MPI_print_halo_timings() BIND(C,name='RPN_MPI_print_halo_timings')
      end subroutine RPN_MPI_print_halo_timings
      subroutine RPN_MPI_ez_halo_parms(row, col, mode) bind(C,name='RPN_MPI_ez_halo_parms')
      import :: RPN_MPI_Comm, C_INT, C_CHAR
      type(RPN_MPI_Comm), intent(IN) :: row, col
      character(C_CHAR), dimension(*), intent(IN) :: mode
      end subroutine RPN_MPI_ez_halo_parms
#endif
#if ! defined(IN_RPN_MPI_ez_transpose)
      subroutine RPN_MPI_transpose_setup(gnk, lnkx, row_comm, col_comm, ierr)
      integer, intent(IN) :: row_comm, col_comm
      integer, intent(IN) :: gnk, lnkx
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_transpose_setup
      subroutine RPN_MPI_ez_transpose_xz(z, zt, forward, lnix, lnjy, lnkx, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward
      integer, intent(IN) :: lnix, lnjy, lnkx
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_ez_transpose_xz
      subroutine RPN_MPI_transpose_xz(z, zt, forward, lnix, lnjy, gnk, lnkx, row_comm, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward
      integer, intent(IN) :: lnix, lnjy, gnk, lnkx
      integer, intent(IN) :: row_comm
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_transpose_xz
      subroutine RPN_MPI_transpose_xz_s(z, zt, forward, lnix, lnjy, gnk, lnkx, row_comm, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward 
      integer, intent(IN) :: lnix, lnjy, gnk, lnkx
      integer, intent(IN) :: row_comm
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_transpose_xz_s
      subroutine RPN_MPI_ez_transpose_xy(z, zt, forward, lniy, lnjy, lnkx, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward
      integer, intent(IN) :: lniy, lnjy, lnkx
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_ez_transpose_xy
      subroutine RPN_MPI_transpose_xy(z, zt, forward, lniy, lnjy, lnkx, col_comm, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward
      integer, intent(IN) :: lniy, lnjy, lnkx
      integer, intent(IN) :: col_comm
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_transpose_xy
      subroutine RPN_MPI_transpose_xy_s(z, zt, forward, lniy, lnjy, lnkx, col_comm, ierr)
      import :: RPN_MPI_Loc
      type(RPN_MPI_Loc), intent(IN), value :: z, zt
      logical, intent(IN) :: forward
      integer, intent(IN) :: lniy, lnjy, lnkx
      integer, intent(IN) :: col_comm
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_transpose_xy_s
#endif
#if ! defined(IN_RPN_MPI_finalize)

      subroutine RPN_MPI_finalize(ierr)
      implicit none
      integer, intent(OUT) ::  ierr
      end subroutine RPN_MPI_finalize
#endif
#if ! defined(IN_RPN_MPI_get_a_free_unit)
      integer function RPN_MPI_get_a_free_unit()
      end function RPN_MPI_get_a_free_unit
      integer function RPN_COMM_get_a_free_unit()
      end function RPN_COMM_get_a_free_unit
#endif
#if ! defined(IN_RPN_MPI_get_mpi_definitions)
      subroutine RPN_MPI_get_mpi_definitions_raw(what, ierr)
      import :: RPN_MPI_mpi_definitions_raw
      type(RPN_MPI_mpi_definitions_raw), intent(INOUT) :: what
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_get_mpi_definitions_raw
      subroutine RPN_MPI_get_mpi_definitions(what, ierr)
      import :: RPN_MPI_mpi_definitions
      type(RPN_MPI_mpi_definitions), intent(INOUT) :: what
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_get_mpi_definitions
      end interface
      interface RPN_MPI_get_mpi_layout_raw
      subroutine RPN_MPI_get_mpi_layout_raw1(what, ierr)
      import :: mpi_layout_internal, C_INT
      type(mpi_layout_internal), intent(INOUT) :: what
      integer(C_INT), intent(OUT) :: ierr
      end subroutine RPN_MPI_get_mpi_layout_raw1
      subroutine RPN_MPI_get_mpi_layout_raw2(what, ierr)
      import :: mpi_layout_r, C_INT
      type(mpi_layout_r), intent(INOUT) :: what
      integer(C_INT), intent(OUT) :: ierr 
      end subroutine RPN_MPI_get_mpi_layout_raw2
      end interface
      interface
      end interface
      interface RPN_MPI_get_mpi_layout
      subroutine RPN_MPI_get_mpi_layout1(what, ierr)
      import :: mpi_layout, C_INT
      type(mpi_layout), intent(INOUT) :: what
      integer(C_INT), intent(OUT) :: ierr
      end subroutine RPN_MPI_get_mpi_layout1
      subroutine RPN_MPI_get_mpi_layout2(what, ierr)
      import :: mpi_layout_f, C_INT
      type(mpi_layout_f), intent(INOUT) :: what
      integer(C_INT), intent(OUT) :: ierr
      end subroutine RPN_MPI_get_mpi_layout2
      end interface
      interface
#endif
#if ! defined(IN_RPN_MPI_grid_collect_dist)
      subroutine RPN_MPI_grid_collect(topo, &
      zloc, mini, maxi, minj, maxj, &
      zglb, gni, gnj, ierr) bind(C,name='RPN_MPI_grid_collect')
      import :: RPN_MPI_Loc, RPN_MPI_Ftopo, C_INT
      type(RPN_MPI_Ftopo), intent(IN) :: topo
      integer(C_INT), intent(IN) :: mini,maxi,minj,maxj,gni,gnj
      integer(C_INT), intent(OUT) :: ierr
      type(RPN_MPI_Loc), intent(IN), value :: zloc, zglb
      end subroutine RPN_MPI_grid_collect
      subroutine RPN_MPI_grid_dist(topo, &
      zloc, mini, maxi, minj, maxj, &
      zglb, gni, gnj, ierr) bind(C,name='RPN_MPI_grid_dist')
      import :: RPN_MPI_Loc, RPN_MPI_Ftopo, C_INT 
      type(RPN_MPI_Ftopo), intent(IN) :: topo
      integer(C_INT), intent(IN) :: mini,maxi,minj,maxj,gni,gnj
      integer(C_INT), intent(OUT) :: ierr
      type(RPN_MPI_Loc), intent(IN), value :: zloc, zglb
      end subroutine RPN_MPI_grid_dist
#endif
#if ! defined(IN_RPN_MPI_grid_topo)
      subroutine RPN_MPI_set_grid_topo(npex, npey, blkx, blky, x_first)
      integer, intent(IN) :: npex, npey
      integer, intent(IN) :: blkx, blky
      logical, intent(IN) :: x_first
      end subroutine RPN_MPI_set_grid_topo
      subroutine RPN_MPI_grid_topo(topo, npex, npey, blkx, blky, x_first, ierr)
      import :: RPN_MPI_Ftopo
      type(RPN_MPI_Ftopo), intent(INOUT) :: topo
      integer, intent(IN) :: npex, npey
      integer, intent(IN) :: blkx, blky
      logical, intent(IN) :: x_first
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_grid_topo
      subroutine RPN_MPI_ez_grid_topo(topo, ierr)
      import :: RPN_MPI_Ftopo
      type(RPN_MPI_Ftopo), intent(INOUT) :: topo
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_ez_grid_topo
      subroutine RPN_MPI_local_topo(topo, gni, gnj, mode, ierr)
      import :: RPN_MPI_Ftopo
      type(RPN_MPI_Ftopo), intent(INOUT) :: topo
      integer, intent(IN)  :: gni, gnj, mode
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_local_topo
      subroutine RPN_MPI_init_topo(topo, ierr)
      import :: RPN_MPI_Ftopo
      type(RPN_MPI_Ftopo), intent(INOUT) :: topo
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_init_topo
      subroutine RPN_MPI_set_fcom(fcom, ierr)
      import :: RPN_MPI_Fcom
      type(RPN_MPI_Fcom), intent(INOUT) :: fcom
      integer, intent(OUT) :: ierr
      end subroutine RPN_MPI_set_fcom
#endif
#if ! defined(IN_RPN_MPI_init)

      INTEGER FUNCTION RPN_MPI_init &
         (Userinit,Pelocal,Petotal,Pex,Pey,MultiGrids,Grids,AppID,Io)
      implicit none
      external :: Userinit
      integer, intent(out)   :: Pelocal,Petotal
      integer, intent(inout) :: Pex,Pey 
      integer, intent(in)    :: MultiGrids
      integer, intent(in)    :: Grids
      character(len=*)       :: AppID
      integer, intent(in)    :: Io
      end FUNCTION RPN_MPI_init
#endif
#if ! defined(IN_RPN_MPI_init_helpers)

      subroutine RPN_MPI_mydomain (call_back, mydomain)
      external :: call_back
      integer, intent(OUT) :: mydomain
      end subroutine RPN_MPI_mydomain
      subroutine RPN_COMM_mydomain (call_back, mydomain)
      external :: call_back
      integer, intent(OUT) :: mydomain
      end subroutine RPN_COMM_mydomain

      subroutine RPN_MPI_world_set(world_comm)
      integer, intent(IN) ::  world_comm
      end subroutine RPN_MPI_world_set
      subroutine RPN_COMM_world_set(world_comm)
      integer, intent(IN) ::  world_comm
      end subroutine RPN_COMM_world_set
      subroutine RPN_MPI_get_core_and_numa(core, numa)
      integer, intent(OUT) ::  core, numa
      end subroutine RPN_MPI_get_core_and_numa
      function RPN_MPI_initialized() result(status)
      logical ::  status
      end function RPN_MPI_initialized
#endif
#if ! defined(IN_RPN_MPI_petopo)

      subroutine RPN_COMM_set_petopo(sizx,sizy) 
      implicit none
      integer, intent(IN) :: sizx,sizy
      end subroutine RPN_COMM_set_petopo
      subroutine RPN_MPI_set_petopo(sizx,sizy)
      implicit none
      integer, intent(IN) :: sizx,sizy
      end subroutine RPN_MPI_set_petopo

      integer function RPN_COMM_petopo(pex,pey)
      integer, intent(IN) :: pex,pey
      end function RPN_COMM_petopo

!     legacy functionality for use in rpn_comm to rpn_mpi conversion
      integer function RPN_MPI_petopo(pex,pey)
      implicit none
      integer, intent(IN) :: pex,pey
      end function RPN_MPI_petopo

!     legacy functionality for use in rpn_comm to rpn_mpi conversion
      integer function RPN_MPI_get_pe(x,y,grd,sgrd,communicator)
      implicit none
      integer, intent(IN) :: x,y,grd,sgrd
      character (len=*), intent(IN) :: communicator
      end function RPN_MPI_get_pe  

      integer function RPN_COMM_get_pe(x,y,grd,sgrd,communicator)
      implicit none
      integer, intent(IN) :: x,y,grd,sgrd
      character (len=*), intent(IN) :: communicator
      end function RPN_COMM_get_pe
#endif
#if ! defined(IN_RPN_MPI_set_timeout_alarm)
      function RPN_MPI_set_timeout_alarm(seconds) result(seconds_since)
      integer, intent(IN) :: seconds
      integer :: seconds_since
      end function RPN_MPI_set_timeout_alarm
      function RPN_COMM_set_timeout_alarm(seconds) result(seconds_since)
      integer, intent(IN) :: seconds
      integer :: seconds_since
      end function RPN_COMM_set_timeout_alarm                            
#endif
#if ! defined(IN_RPN_MPI_split_by_numa)

subroutine RPN_MPI_split_by_memory_domain(   &
      origcomm, split_by,               &
      nodecomm, numacomm, peercomm,     & 
      noderank, numarank, peerrank, isiz, ierr)
      integer, intent(IN)  :: origcomm
      integer, intent(IN)  :: split_by
      integer, intent(OUT) :: nodecomm
      integer, intent(OUT) :: numacomm
      integer, intent(OUT) :: peercomm
      integer, intent(OUT) :: noderank
      integer, intent(OUT) :: numarank
      integer, intent(OUT) :: peerrank
      integer, intent(OUT) :: isiz
      integer, intent(OUT) :: ierr
end subroutine RPN_MPI_split_by_memory_domain
subroutine RPN_MPI_split_by_socket(origcomm, sockcomm, sockrank, peercomm, peerrank, ierr)
      integer, intent(IN)  :: origcomm
      integer, intent(OUT) :: sockcomm
      integer, intent(OUT) :: sockrank
      integer, intent(OUT) :: peercomm
      integer, intent(OUT) :: peerrank
      integer, intent(OUT) :: ierr
end subroutine RPN_MPI_split_by_socket
#endif
#if ! defined(IN_RPN_MPI_topology)

      integer function RPN_COMM_topo_2(nxg,minx,maxx,nxl,nxlmax,halo,nx0,alongx,fill,relax,abort)
      implicit none                                                         
      integer, intent(in) :: nxg,halo,relax
      logical, intent(in) :: alongx,fill,abort
      integer, intent(out):: minx,maxx,nxl,nxlmax,nx0
      end function RPN_COMM_topo_2

      integer function RPN_MPI_topology(nxg,minx,maxx,nxl,nxlmax,halo,nx0,alongx,fill,relax,abort)
      implicit none                                                         
      integer, intent(in) :: nxg,halo,relax
      logical, intent(in) :: alongx,fill,abort
      integer, intent(out):: minx,maxx,nxl,nxlmax,nx0
      end  function RPN_MPI_topology

      integer function RPN_COMM_topo(nxg,minx,maxx,nxl,nxlmax,halo,nx0,alongx,fill)
      implicit none                                                                
      integer, intent(in) :: nxg,halo
      logical, intent(in) :: alongx,fill
      integer, intent(out):: minx,maxx,nxl,nxlmax,nx0
      end function RPN_COMM_topo                                                 
#endif
end interface
