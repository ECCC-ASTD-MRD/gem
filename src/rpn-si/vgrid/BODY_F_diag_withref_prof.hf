     use vgrid_utils, only: get_allocate
     type(vgrid_descriptor), intent(in) :: self                  !Vertical descriptor instance
     integer, dimension(:), intent(in) :: ip1_list               !Key of prototype field
     real(kind=REAL_KIND), dimension(:), pointer :: levels                       !Physical level values
     real(kind=REAL_KIND), optional, intent(in) :: sfc_field                     !Surface field reference for coordinate [none]
     real(kind=REAL_KIND), optional, intent(in) :: sfc_field_ls                  !Surface large scale field reference for coordinate [none]
     logical, optional, intent(in) :: in_log                     !Compute levels in ln() [.false.]          
     logical, optional, intent(in) :: dpidpis                    !Compute partial derivative of hydrostatic pressure (pi) with
                                                                 !   respect to surface hydrostatic pressure(pis) [.false.]
     
     ! Local variables
     integer :: error,nk
     real(kind=REAL_KIND) :: my_sfc_field, my_sfc_field_ls
     real(kind=REAL_KIND), dimension(:,:), pointer :: sfc_field_2d, sfc_field_ls_2d
     real(kind=REAL_KIND), dimension(:,:,:), pointer :: levels_3d
     logical :: my_in_log,my_dpidpis

     ! Set error status
     status = VGD_ERROR

     nullify(sfc_field_2d,sfc_field_ls_2d,levels_3d)

     if(.not.is_valid(self,'SELF'))then
        write(for_msg,*) 'vgrid structure is not valid in diag_withref_prof'//PROC_SUFF
        call msg(MSG_ERROR,VGD_PRFX//for_msg)       
        return
     endif

     ! Set default values
     my_sfc_field = VGD_MISSING
     if (present(sfc_field)) my_sfc_field = sfc_field
     my_sfc_field_ls = VGD_MISSING
     if (present(sfc_field_ls)) my_sfc_field_ls = sfc_field_ls
     my_in_log = .false.
     if (present(in_log)) my_in_log = in_log
     my_dpidpis = .false.
     if (present(dpidpis)) my_dpidpis = dpidpis

     nk=size(ip1_list)

     allocate(sfc_field_2d(1,1),sfc_field_ls_2d(1,1),levels_3d(1,1,nk),stat=error)
     if (error /= 0) then
        if(associated(sfc_field_2d))deallocate(sfc_field_2d)
        if(associated(sfc_field_ls_2d))deallocate(sfc_field_ls_2d)
        if(associated(levels_3d))deallocate(levels_3d)
        write(for_msg,*) 'cannot allocate space for p0/levels in diag_withref_prof'//PROC_SUFF
        call msg(MSG_ERROR,VGD_PRFX//for_msg)
        return
     endif
     sfc_field_2d=my_sfc_field
     ! Wrap call to level calculator
     if (present(sfc_field_ls))then
        sfc_field_ls_2d=my_sfc_field_ls
#if defined(REAL_8)
        error = diag_withref_8(self,sfc_field=sfc_field_2d,sfc_field_ls=sfc_field_ls_2d,ip1_list=ip1_list,levels=levels_3d,in_log=my_in_log,dpidpis=my_dpidpis)
#else
        error = diag_withref(self,sfc_field=sfc_field_2d,sfc_field_ls=sfc_field_ls_2d,ip1_list=ip1_list,levels=levels_3d,in_log=my_in_log,dpidpis=my_dpidpis)
#endif
     else
#if defined(REAL_8)
        error = diag_withref_8(self,sfc_field=sfc_field_2d,ip1_list=ip1_list,levels=levels_3d,in_log=my_in_log,dpidpis=my_dpidpis)
#else
        error = diag_withref(self,sfc_field=sfc_field_2d,ip1_list=ip1_list,levels=levels_3d,in_log=my_in_log,dpidpis=my_dpidpis)
#endif
     endif
     if (error /= 0) then
        deallocate(sfc_field_2d,levels_3d)
        write(for_msg,*) 'problem with diag_withref in diag_withref_prof'//PROC_SUFF
        call msg(MSG_ERROR,VGD_PRFX//for_msg)
        return
     endif
     error = get_allocate('levels',levels,nk,ALLOW_RESHAPE,'(in diag_withref_prof'//PROC_SUFF//')')
     if(error/=0)return
     levels=levels_3d(1,1,1:nk)
     deallocate(sfc_field_2d,sfc_field_ls_2d,levels_3d)
     ! Set status and return
     status = VGD_OK
     return
