     type(vgrid_descriptor), intent(in) :: self                  !Vertical descriptor instance
     integer, dimension(:), intent(in) :: ip1_list               !Key of prototype field
     real(kind=REAL_KIND), dimension(:), pointer :: levels                     !Physical level values
     real(kind=REAL_KIND), optional, intent(in) :: sfc_field                   !Surface field reference for coordinate [none]
     logical, optional, intent(in) :: in_log                     !Compute levels in ln() [.false.]          
     real(kind=REAL_KIND), optional, intent(in) :: sfc_field_ls                !Surface field reference for coordinate [none]

     ! Local variables
     real(kind=REAL_KIND) :: my_sfc_field
     logical :: my_in_log

     ! Set return value
     status = VGD_ERROR

     if(.not.is_valid(self,'SELF'))then
        write(for_msg,*) 'vgrid structure is not valid in levels_withref_prof'//PROC_SUFF
        call msg(MSG_ERROR,VGD_PRFX//for_msg)       
        return
     endif
     
     ! Set default values
     my_sfc_field = VGD_MISSING
     if (present(sfc_field)) my_sfc_field = sfc_field
     my_in_log = .false.
     if (present(in_log)) my_in_log = in_log

     ! Wrap call to level calculation
     if(present(sfc_field_ls))then
#if defined(REAL_8)
        status = diag_withref_prof_8(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log,sfc_field_ls=sfc_field_ls)
#else
        status = diag_withref_prof(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log,sfc_field_ls=sfc_field_ls)
#endif
     else
#if defined(REAL_8)
        status = diag_withref_prof_8(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log)
#else
        status = diag_withref_prof(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log)
#endif
     endif
     return
