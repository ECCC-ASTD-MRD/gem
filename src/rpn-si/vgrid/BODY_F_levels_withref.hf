      use vgrid_utils, only: get_allocate
      ! Given referent, compute physical levelling information from the vertical description
      type(vgrid_descriptor), intent(in) :: self                  !Vertical descriptor instance
      integer, dimension(:), intent(in) :: ip1_list               !Key of prototype field
      real(kind=REAL_KIND), dimension(:,:,:), pointer :: levels                   !Physical level values
      real(kind=REAL_KIND), dimension(:,:), optional, intent(in) :: sfc_field     !Surface field reference for coordinate [none]
      real(kind=REAL_KIND), dimension(:,:), optional, intent(in) :: sfc_field_ls  !Surface field large scale reference for coordinate [none]
      logical, optional, intent(in) :: in_log                     !Compute levels in ln() [.false.]

      ! Local variables
      integer :: error,ni,nj
      real(kind=REAL_KIND), dimension(:,:), pointer :: my_sfc_field
      logical :: my_in_log
      
      nullify(my_sfc_field)

      ! Set return value
      status = VGD_ERROR
      
      if(.not.is_valid(self,'SELF'))then
         write(for_msg,*) 'vgrid structure is not valid in levels_withref'//PROC_SUFF
         call msg(MSG_ERROR,VGD_PRFX//for_msg)       
         return
      endif
      
      ! Set default values
      if (present(sfc_field)) then
         ni = size(sfc_field,dim=1); nj = size(sfc_field,dim=2)
      else
         ni = 1; nj = 1
      endif
      allocate(my_sfc_field(ni,nj),stat=error)
      if (error /= 0) then
         write(for_msg,*) 'cannot allocate space for sfc_field in levels_withref'//PROC_SUFF
         call msg(MSG_ERROR,VGD_PRFX//for_msg)
         return
      endif
      if (present(sfc_field)) then
         my_sfc_field = sfc_field
      else
         my_sfc_field = VGD_MISSING
      endif
      if (present(sfc_field_ls)) then
         if( size(sfc_field_ls,dim=1) /= ni .or. size(sfc_field_ls,dim=2) /= nj )then
            write(for_msg,*) 'size of sfc_field_ls not the same as sfc_field in levels_withref'//PROC_SUFF
            call msg(MSG_ERROR,VGD_PRFX//for_msg)
            return
         endif
      endif
      my_in_log = .false.
      if (present(in_log)) my_in_log = in_log
      
      ! Wrap call to level calculator
      if( present(sfc_field_ls) )then
#if defined(REAL_8)
         status=diag_withref_8(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log,sfc_field_ls=sfc_field_ls)
#else
         status=diag_withref(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log,sfc_field_ls=sfc_field_ls)
#endif
      else
#if defined(REAL_8)
         status=diag_withref_8(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log)
#else
         status=diag_withref(self,ip1_list,levels,sfc_field=my_sfc_field,in_log=my_in_log)
#endif
      endif
      deallocate(my_sfc_field)
      return
