      use vgrid_utils, only: get_allocate
      ! Given referent, compute physical levelling information from the vertical description
      type(vgrid_descriptor), intent(in) :: self                  !Vertical descriptor instance
      integer, dimension(:), intent(in) :: ip1_list               !Key of prototype field
      real(kind=REAL_KIND), dimension(:,:,:), pointer :: dpidpis                !pressure derivative with respect to sfc pressure
      real(kind=REAL_KIND), dimension(:,:), optional, intent(in) :: sfc_field   !Surface field reference for coordinate [none]
      
      ! Local variables 
      integer :: ni,nj,error,stat
      real(kind=REAL_KIND), dimension(:,:), pointer :: my_sfc_field
      
      nullify(my_sfc_field)
      
      ! Set return value
      status = VGD_ERROR
      
      if(.not.is_valid(self,'SELF'))then
         write(for_msg,*) 'vgrid structure is not valid in dpidpis_withref'//PROC_SUFF
         call msg(MSG_ERROR,VGD_PRFX//for_msg)       
         return
      endif
      
      ! Set default values
      if (present(sfc_field)) then
         ni = size(sfc_field,dim=1); nj = size(sfc_field,dim=2)
      else
         ni = 1; nj = 1
      endif
      allocate(my_sfc_field(ni,nj),stat=error)
      if (error /= 0) then
         nullify(my_sfc_field)
         write(for_msg,*) 'cannot allocate space for sfc_field in dpidpis_withref'//PROC_SUFF
         call msg(MSG_ERROR,VGD_PRFX//for_msg)
         return
      endif
      if (present(sfc_field)) then
         my_sfc_field = sfc_field
      else
         my_sfc_field = VGD_MISSING
      endif
      ! Wrap call to level calculator
#if defined(REAL_8)
      stat=diag_withref_8(self,ip1_list,dpidpis,sfc_field=my_sfc_field,dpidpis=.true.)
#else
      stat=diag_withref(self,ip1_list,dpidpis,sfc_field=my_sfc_field,dpidpis=.true.)
#endif
      if(stat==VGD_ERROR)then
         deallocate(my_sfc_field)
         return
      endif
      deallocate(my_sfc_field)
      status=VGD_OK
      return
