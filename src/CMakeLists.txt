set(WITH_SYSTEM_RPN FALSE CACHE BOOL "Control whether to use installed RPN-SI libs")
message(STATUS "(EC) WITH_SYSTEM_RPN = ${WITH_SYSTEM_RPN}")
if ((WITH_SYSTEM_RPN) OR (CACHE WITH_SYSTEM_RPN) OR (ENV{WITH_SYSTEM_RPN}))
  find_package(RMN)
  if (RMN_FOUND) 
    #include_directories(${RMN_INCLUDE_DIRS})
    add_compile_definitions(HAVE_RMN)
    find_path(RMN_INCLUDE_DIR_ALL
      NAMES convert_ip123.inc
      PATHS ${EC_INCLUDE_PATH})
    include_directories(${RMN_INCLUDE_DIR_ALL})
  endif()
  find_package(tdpack ${tdpack_REQ_VERSION} CONFIG)
  find_package(rpncomm ${rpncomm_REQ_VERSION} CONFIG)
  find_package(VGRID)
  if (VGRID_FOUND)
    include_directories(${VGRID_INCLUDE_DIRS})
    add_compile_definitions(HAVE_VGRID)
  endif()
  find_package(MASSV)
  if (MASSV_FOUND) 
    add_compile_definitions(HAVE_MASSV)
  endif()
  # Include an architecture dependent directory with include files for a
  # particular architecture and compiler.
  message(STATUS "(EC) arch-dependent include directory: ${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE}")
  include_directories(${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE})
else()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rmn)
    set(RMN_SRC "rmn" CACHE STRING "rmn sources")
    set(RMN_PRIVATE_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rmn/include" CACHE PATH "RMN include directory" FORCE)
    set(RMN_PUBLIC_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rmn/src/PUBLIC_INCLUDES" CACHE PATH "RMN public include directory" FORCE)
    set(RMN_INCLUDE_DIR "${CMAKE_BINARY_DIR}/src/rmn" CACHE PATH "RMN include directory" FORCE)
    set(RMN_ARCH_DEP_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rmn/include/${BUILD_ARCH}-${COMPILER_SUITE}" CACHE PATH "RMN arch-dep include directory" FORCE)
    set(rmn_FOUND TRUE CACHE BOOL "Control whether RMN library was found")
    set(RMN_FOUND TRUE CACHE BOOL "Control whether RMN library was found")
    include_directories(${RMN_INCLUDE_DIR} ${RMN_PUBLIC_INCLUDE_DIR} ${RMN_PRIVATE_INCLUDE_DIR} ${RMN_ARCH_DEP_INCLUDE_DIR})
    add_subdirectory(rpn-si/rmn rmn)
   else()
     message(ERROR "(EC) No rmn directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/vgrid)
    add_subdirectory(rpn-si/vgrid vgrid)
    set(VGRID_SRC "vgrid" CACHE STRING "vgrid sources")
    set(VGRID_INCLUDE_DIR "${CMAKE_BINARY_DIR}/src/vgrid/lib" CACHE PATH "vgrid generated include directory" FORCE)
    include_directories(${VGRID_INCLUDE_DIR})
    set(VGRID_FOUND TRUE CACHE BOOL "Control whether vgrid was found")
  else()
    message(ERROR "(EC) No vgrid directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/massv)
    add_subdirectory(rpn-si/massv massv)
    set(MASSV_SRC "massv" CACHE STRING "massv library")
    set(MASSV_FOUND TRUE CACHE BOOL "Control whether massv library was found")
   else()
     message(ERROR "(EC) No massv directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm)
    set(RPNCOMM_SRC "rpncomm" CACHE STRING "rpncomm sources")
    set(RPNCOMM_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm/src" CACHE PATH "rpncomm include directory" FORCE)
    set(RPNCOMM_GEN_INCLUDE_DIR "${CMAKE_BINARY_DIR}/src/rpncomm/src" CACHE PATH "rpncomm include directory" FORCE)
    set(rpncomm_FOUND TRUE CACHE BOOL "Control whether rpncomm library was found")
    include_directories(${RPNCOMM_INCLUDE_DIR} ${RPNCOMM_GEN_INCLUDE_DIR})
    add_subdirectory(rpn-si/rpncomm rpncomm)
  else()
    message(ERROR "(EC) No rpncomm directory found!")
  endif()
endif()

set(WITH_SYSTEM_MODELUTILS FALSE CACHE BOOL "Control whether to use installed modelutils libs")
message(STATUS "(EC) WITH_SYSTEM_MODELUTILS = ${WITH_SYSTEM_MODELUTILS}")
if ((WITH_SYSTEM_MODELUTILS) OR (CACHE WITH_SYSTEM_MODELUTILS) OR (ENV{WITH_SYSTEM_MODELUTILS}))
  find_package(modelutils ${modelutils_REQ_VERSION} CONFIG)
  include_directories(${modelutils_INCLUDE_DIRS})
else()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/modelutils)
    set(MODELUTILS_SRC "modelutils" CACHE STRING "modelutils sources")
    set(MODELUTILS_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/modelutils/include" CACHE PATH "modelutils include directory" FORCE)
    set(MODELUTILS_MODULES_DIR "${CMAKE_BINARY_DIR}/src/modelutils/modelutils/modules" CACHE PATH "modelutils modules directory" FORCE)
    set(modelutils_FOUND TRUE CACHE BOOL "Control whether modelutils library was found")
    include_directories(${MODELUTILS_INCLUDE_DIR} ${MODELUTILS_MODULES_DIR})
    add_subdirectory(modelutils modelutils)
  else()
    message(ERROR "(EC) No modelutils directory found!")
  endif()
endif()

set(WITH_SYSTEM_RPNPHY FALSE CACHE BOOL "Control whether to use installed rpnphy libs")
message(STATUS "(EC) WITH_SYSTEM_RPNPHY = ${WITH_SYSTEM_RPNPHY}")
if ((WITH_SYSTEM_RPNPHY) OR (CACHE WITH_SYSTEM_RPNPHY) OR (ENV{WITH_SYSTEM_RPNPHY}))
  find_package(rpnphy ${rpnphy_REQ_VERSION} CONFIG)
  include_directories(${rpnphy_INCLUDE_DIRS})
else()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpnphy)
    set(RPNPHY_SRC "rpnphy" CACHE STRING "rpnphy sources")
    set(RPNPHY_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpnphy/include" CACHE PATH "rpnphy include directory" FORCE)
    set(RPNPHY_MODULES_DIR "${CMAKE_BINARY_DIR}/src/rpnphy/rpnphy/modules" CACHE PATH "rpnphy modules directory" FORCE)
    set(rpnphy_FOUND TRUE CACHE BOOL "Control whether rpnphy library was found")
    include_directories(${RPNPHY_INCLUDE_DIR} ${RPNPHY_MODULES_DIR})
    add_subdirectory(rpnphy rpnphy)
  else()
    message(ERROR "(EC) No rpnphy directory found!")
  endif()
endif()

set(WITH_SYSTEM_GEMDYN FALSE CACHE BOOL "Control whether to use installed gemdyn libs")
message(STATUS "(EC) WITH_SYSTEM_GEMDYN = ${WITH_SYSTEM_GEMDYN}")
if ((WITH_SYSTEM_GEMDYN) OR (CACHE WITH_SYSTEM_GEMDYN) OR (ENV{WITH_SYSTEM_GEMDYN}))
  find_package(gemdyn ${gemdyn_REQ_VERSION} CONFIG)
  include_directories(${gemdyn_INCLUDE_DIRS})
else()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/gemdyn)
    set(GEMDYN_SRC "gemdyn" CACHE STRING "gemdyn sources")
    set(GEMDYN_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/gemdyn/include" CACHE PATH "gemdyn include directory" FORCE)
    set(gemdyn_FOUND TRUE CACHE BOOL "Control whether gemdyn library was found")
    include_directories(${GEMDYN_INCLUDE_DIR} ${GEMDYN_MODULES_DIR})
    add_subdirectory(gemdyn gemdyn)
  else()
    message(ERROR "(EC) No gemdyn directory found!")
  endif()
endif()

add_subdirectory(gem gem)
add_subdirectory(rpn-si/cclargs cclargs)
add_subdirectory(rpn-si/fstinfo fstinfo)
add_subdirectory(rpn-si/filetype filetype)

# Declare the dependencies of all the components
if ((NOT "${MODELUTILS_SRC}" STREQUAL "") AND ( NOT "${VGRID_SRC}" STREQUAL "" OR NOT "${RPNCOMM_SRC}" STREQUAL "" OR NOT "${RMN_SRC}" STREQUAL "" ))
  add_dependencies(modelutils ${VGRID_SRC} ${RPNCOMM_SRC} ${RMN_SRC})
endif()
  
if ((NOT "${RPNPHY_SRC}" STREQUAL "") AND ( NOT "${MODELUTILS_SRC}" STREQUAL "" OR NOT "${VGRID_SRC}" STREQUAL "" OR
      NOT "${RPNCOMM_SRC}" STREQUAL "" OR NOT "${RMN_SRC}" STREQUAL "" ))
  add_dependencies(rpnphy ${MODELUTILS_SRC} ${VGRID_SRC} ${RPNCOMM_SRC} ${RMN_SRC})
  add_dependencies(rpnphy_chm_stubs ${MODELUTILS_SRC} ${VGRID_SRC} ${RPNCOMM_SRC} ${RMN_SRC})
endif()

if ((NOT "${GEMDYN_SRC}" STREQUAL "") AND (NOT "${RPNPHY_SRC}" STREQUAL "" OR NOT "${MODELUTILS_SRC}" STREQUAL ""
      OR NOT "${VGRID_SRC}" STREQUAL "" OR NOT "${RPNCOMM_SRC}" STREQUAL "" OR NOT "${RMN_SRC}" STREQUAL "" OR NOT "${MASSV_SRC}" STREQUAL ""))
  add_dependencies(gemdyn ${RPNPHY_SRC} ${MODELUTILS_SRC} ${VGRID_SRC} ${RPNCOMM_SRC} ${RMN_SRC} ${MASSV_SRC})
endif()
