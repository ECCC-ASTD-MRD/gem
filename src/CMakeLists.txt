# Include an architecture dependent directory with include files for a
# particular architecture and compiler.
message(STATUS "arch-dependent include directory: ${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE}")
include_directories(${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE})

set(DO_RPN_SI TRUE CACHE BOOL "Control whether to compile RPN-SI libs")
if ((DO_RPN_SI) OR (CACHE DO_RPN_SI) OR (ENV{DO_RPN_SI}))
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rmn)
    set(RMN_LIBRARY_SRC "rmn" CACHE STRING "rmn sources")
    set(RMN_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/rpn-si/rmn/PUBLIC_INCLUDES" CACHE PATH "RMN include directory" FORCE)
    set(RMN_COMPILER_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/rpn-si/RPN/compiler_includes" CACHE PATH "RPN compiler include directory" FORCE)
    include_directories(${RMN_INCLUDE_DIRS} ${RMN_COMPILER_INCLUDE_DIRS})
    add_subdirectory(rpn-si/rmn rmn)
   else()
     message(ERROR "No rmn directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm)
    add_subdirectory(rpn-si/rpncomm rpncomm)
    set(RPNCOMM_LIBRARY_SRC "rpn_comm" CACHE STRING "rpncomm sources")
    set(RPNCOMM_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm" CACHE PATH "rpncomm include directories" FORCE)
    include_directories(${RPNCOMM_INCLUDE_DIRS})
   else()
     message(ERROR "No rpncomm directory found!")
   endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/mpi-extras)
    add_subdirectory(rpn-si/mpi-extras mpi-extras)
    set(MPIEXTRAS_LIBRARY_SRC "mpi_extras" CACHE STRING "mpi-extras sources")
    set(MPIEXTRAS_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/rpn-si/mpi-extras" CACHE PATH "mpiextras include directories" FORCE)
    include_directories(${MPIEXTRAS_INCLUDE_DIRS})
   else()
     message(ERROR "No mpi-extras directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/vgrid)
    add_subdirectory(rpn-si/vgrid vgrid)
    set(VGRID_LIBRARY_SRC "vgrid" CACHE STRING "vgrid sources")
  else()
    message(ERROR "No vgrid directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/massv)
    add_subdirectory(rpn-si/massv massv)
    set(MASSV_LIBRARY_SRC "massv" CACHE STRING "massv library")
   else()
     message(ERROR "No massv directory found!")
  endif()
else()
  find_package(RMN)
  if (RMN_FOUND) 
    include_directories(${RMN_INCLUDE_DIRS})
    add_compile_definitions(HAVE_RMN)
    message(STATUS "RMN VERSION = ${RMN_VERSION}")
  endif()
  find_package(RPNCOMM)
  if (RPNCOMM_FOUND) 
    include_directories(${RPNCOMM_INCLUDE_DIRS})
    add_compile_definitions(HAVE_RPNCOMM)
  endif()
  find_package(MPIEXTRAS)
  if (MPIEXTRAS_FOUND) 
    include_directories(${MPIEXTRAS_INCLUDE_DIRS})
    add_compile_definitions(HAVE_MPIEXTRAS)
  endif()
  find_package(VGRID)
  if (VGRID_FOUND)
    include_directories(${VGRID_INCLUDE_DIRS})
    add_compile_definitions(HAVE_VGRID)
    message(STATUS "VGRID VERSION = ${VGRID_VERSION}")
  endif()
  find_package(MASSV)
  if (MASSV_FOUND) 
    add_compile_definitions(HAVE_MASSV)
  endif()
endif()

add_subdirectory(modelutils modelutils)
add_subdirectory(rpnphy rpnphy)
add_subdirectory(gemdyn gemdyn)
add_subdirectory(rpn-si/cclargs cclargs)
add_subdirectory(rpn-si/fstinfo fstinfo)
add_subdirectory(rpn-si/filetype filetype)

# Declare the dependencies of all the components
if (NOT "${VGRID_LIBRARY_SRC}" STREQUAL "")
  add_dependencies(modelutils ${VGRID_LIBRARY_SRC})
endif()
add_dependencies(phy modelutils ${VGRID_LIBRARY_SRC})
add_dependencies(gem phy modelutils ${VGRID_LIBRARY_SRC} ${MPIEXTRAS_LIBRARY_SRC} ${RPNCOMM_LIBRARY_SRC} ${RMN_LIBRARY_SRC} ${MASSV_LIBRARY_SRC})

