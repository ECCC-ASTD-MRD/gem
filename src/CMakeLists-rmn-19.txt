set(WITH_SYSTEM_RPN FALSE CACHE BOOL "Control whether to use installed RPN-SI libs")
message(STATUS "(EC) WITH_SYSTEM_RPN = ${WITH_SYSTEM_RPN}")

if ((WITH_SYSTEM_RPN) OR (CACHE WITH_SYSTEM_RPN) OR (ENV{WITH_SYSTEM_RPN}))
  find_package(RMN ${RMN_REQ_VERSION})
  if (RMN_FOUND) 
    add_compile_definitions(HAVE_RMN)
    include_directories(${RMN_INCLUDE_DIR})
  endif()
  # find_package(RPNCOMM)
  # if (RPNCOMM_FOUND) 
  #   include_directories(${RPNCOMM_INCLUDE_DIR})
  #   add_compile_definitions(HAVE_RPNCOMM)
  # endif()
  find_package(VGRID)
  if (VGRID_FOUND)
    add_compile_definitions(HAVE_VGRID)
    include_directories(${VGRID_INCLUDE_DIR})
  endif()
  find_package(MASSV)
  if (MASSV_FOUND) 
    add_compile_definitions(HAVE_MASSV)
  endif()
  # Include an architecture dependent directory with include files for a
  # particular architecture and compiler.
  message(STATUS "(EC) arch-dependent include directory: ${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE}")
  include_directories(${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE})
else()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rmn)
    include_directories( ${CMAKE_SOURCE_DIR}/src/rpn-si/RPN/compiler_includes )
    # Include an architecture dependent directory with include files for a
    # particular architecture and compiler.
    message(STATUS "(EC) arch-dependent include directory: ${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE}")
    include_directories(${CMAKE_SOURCE_DIR}/src/rpn-si/archdep/include/${BUILD_ARCH}-${COMPILER_SUITE})
    set(RMN_LIBRARY_SRC "rmn" CACHE STRING "rmn sources")
    set(RMN_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rmn/PUBLIC_INCLUDES" CACHE PATH "RMN public include directory" FORCE)
    set(RMN_FOUND TRUE CACHE BOOL "Control whether RMN library was found")
    include_directories(${RMN_INCLUDE_DIR} ${RMN_PRIVATE_INCLUDE_DIR} ${RMN_ARCH_DEP_INCLUDE_DIR})
    add_subdirectory(rpn-si/rmn rmn)
   else()
     message(ERROR "(EC) No rmn directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/vgrid)
    add_subdirectory(rpn-si/vgrid vgrid)
    set(VGRID_LIBRARY_SRC "vgrid" CACHE STRING "vgrid sources")
    set(VGRID_INCLUDE_DIR "${CMAKE_BINARY_DIR}/src/vgrid/lib" CACHE PATH "vgrid generated include directory" FORCE)
    include_directories(${VGRID_INCLUDE_DIR})
    set(VGRID_FOUND TRUE CACHE BOOL "Control whether vgrid was found")
  else()
    message(ERROR "(EC) No vgrid directory found!")
  endif()
  if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/massv)
    add_subdirectory(rpn-si/massv massv)
    set(MASSV_LIBRARY_SRC "massv" CACHE STRING "massv library")
   else()
     message(ERROR "(EC) No massv directory found!")
  endif()
endif()

if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm)
  set(RPNCOMM_LIBRARY_SRC "rpn_comm" CACHE STRING "rpncomm sources")
  set(RPNCOMM_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/src/rpn-si/rpncomm/src" CACHE PATH "rpncomm include directories" FORCE)
  set(RPNCOMM_GEN_INCLUDE_DIR "${CMAKE_BINARY_DIR}/src/rpncomm/src" CACHE PATH "rpncomm generated include directory" FORCE)
  include_directories(${RPNCOMM_INCLUDE_DIR} ${RPNCOMM_GEN_INCLUDE_DIR})
  add_subdirectory(rpn-si/rpncomm rpncomm)
else()
  message(ERROR "(EC) No rpncomm directory found!")
endif()

add_subdirectory(modelutils modelutils)
add_subdirectory(rpnphy rpnphy)
add_subdirectory(gemdyn gemdyn)
add_subdirectory(rpn-si/cclargs cclargs)
add_subdirectory(rpn-si/fstinfo fstinfo)
add_subdirectory(rpn-si/filetype filetype)

# Declare the dependencies of all the components
if (NOT "${VGRID_LIBRARY_SRC}" STREQUAL "")
  add_dependencies(modelutils ${VGRID_LIBRARY_SRC})
endif()
add_dependencies(phy modelutils ${VGRID_LIBRARY_SRC} ${RMN_LIBRARY_SRC})
add_dependencies(gem phy modelutils ${VGRID_LIBRARY_SRC} ${MPIEXTRAS_LIBRARY_SRC} ${RPNCOMM_LIBRARY_SRC} ${RMN_LIBRARY_SRC} ${MASSV_LIBRARY_SRC})
