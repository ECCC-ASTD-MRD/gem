
#ifndef PHYMKPTR
#define PHYMKPTR
#ifdef PHYPTR

   real, pointer :: dummy2d(:,:), dummy3d(:,:,:), dummy4d(:,:,:,:)

#define PHYVAR2D1(NAME, DESC) integer :: NAME = 0
#define PHYVAR3D1(NAME, DESC) integer :: NAME = 0
#define PHYVAR4D1(NAME, DESC) integer :: NAME = 0

#define PHYVAR2DC(NAME, DESC, COND) PHYVAR2D1(NAME, DESC)
#define PHYVAR3DC(NAME, DESC, COND) PHYVAR3D1(NAME, DESC)
#define PHYVAR4DC(NAME, DESC, COND) PHYVAR4D1(NAME, DESC)
#define PHYVAR2DK(NAME, DESC, KEYWORD) PHYVAR2D1(NAME, DESC)
#define PHYVAR3DK(NAME, DESC, KEYWORD) PHYVAR3D1(NAME, DESC)
#define PHYVAR4DK(NAME, DESC, KEYWORD) PHYVAR4D1(NAME, DESC)

#else

#define PHYVAR2D1(NAME, DESC) NAME = phymem_get_i0_string(DESC//" ; VS=A")
#define PHYVAR3D1(NAME, DESC) NAME = phymem_get_i0_string(DESC)
#define PHYVAR4D1(NAME, DESC) NAME = phymem_get_i0_string(DESC)

#define PHYVAR2DC(NAME, DESC, COND) if (COND) PHYVAR2D1(NAME, DESC)
#define PHYVAR3DC(NAME, DESC, COND) if (COND) PHYVAR3D1(NAME, DESC)
#define PHYVAR4DC(NAME, DESC, COND) if (COND) PHYVAR4D1(NAME, DESC)
#define PHYVAR2DK(NAME, DESC, KEYWORD) PHYVAR2DC(NAME, DESC, any(bb_keylist(:bb_n) == KEYWORD))
#define PHYVAR3DK(NAME, DESC, KEYWORD) PHYVAR3DC(NAME, DESC, any(bb_keylist(:bb_n) == KEYWORD))
#define PHYVAR4DK(NAME, DESC, KEYWORD) PHYVAR4DC(NAME, DESC, any(bb_keylist(:bb_n) == KEYWORD))

#endif
#endif


#ifndef PHYMKPTR1
#define PHYMKPTR1

#ifdef MKPTR1DN
#undef MKPTR1DN
#endif
#ifdef MKPTR1D
#undef MKPTR1D
#endif
#ifdef MKPTR1DK
#undef MKPTR1DK
#endif
#ifdef MKPTR2DN
#undef MKPTR2DN
#endif
#ifdef MKPTR2D
#undef MKPTR2D
#endif
#ifdef MKPTR2Dm1
#undef MKPTR2Dm1
#endif
#ifdef MKPTR3DN
#undef MKPTR3DN
#endif
#ifdef MKPTR3D
#undef MKPTR3D
#endif

#ifdef PHYPTRDCL

#define MKPTR1DN(PNAME,PIDX,NI,PBUS) real, dimension(:), pointer, contiguous :: PNAME
#define MKPTR1D(PNAME,PIDX,PBUS) MKPTR1DN(PNAME,PIDX,ni,PBUS)

!!$TODO: #define MKPTR1DK(PNAME,PIDX,KK,PBUS) MKPTR1DN(PNAME,PIDX+(KK-1)*ni,ni,PBUS)
#define MKPTR1DK(PNAME,PIDX,KK,PBUS) real, dimension(:), pointer :: PNAME
   
#define MKPTR2DN(PNAME,PIDX,NI,NK,PBUS) real, dimension(:,:), pointer, contiguous :: PNAME
#define MKPTR2D(PNAME,PIDX,PBUS) MKPTR2DN(PNAME,PIDX,ni,nk,PBUS)
#define MKPTR2Dm1(PNAME,PIDX,PBUS) MKPTR2DN(PNAME,PIDX,ni,nkm1,PBUS)

#define MKPTR3DN(PNAME,PIDX,NI,NK,NN,PBUS) real, dimension(:,:,:), pointer, contiguous :: PNAME
#define MKPTR3D(PNAME,PIDX,NN,PBUS) MKPTR3DN(PNAME,PIDX,ni,nk,NN,PBUS)

#else

#define MKPTR1DN(PNAME,PIDX,NI,PBUS) nullify(PNAME); if (PIDX>0) PNAME(1:NI) => PBUS(PIDX:)
#define MKPTR1D(PNAME,PIDX,PBUS) MKPTR1DN(PNAME,PIDX,ni,PBUS)
#define MKPTR1DK(PNAME,PIDX,KK,PBUS) MKPTR1DN(PNAME,(PIDX+(KK-1)*ni),ni,PBUS)

#define MKPTR2DN(PNAME,PIDX,NI,NK,PBUS) nullify(PNAME); if (PIDX>0) PNAME(1:NI,1:NK) => PBUS(PIDX:)
#define MKPTR2D(PNAME,PIDX,PBUS) MKPTR2DN(PNAME,PIDX,ni,nk,PBUS)
#define MKPTR2Dm1(PNAME,PIDX,PBUS) MKPTR2DN(PNAME,PIDX,ni,nkm1,PBUS)

#define MKPTR3DN(PNAME,PIDX,NI,NK,NN,PBUS) nullify(PNAME); if (PIDX>0) PNAME(1:NI,1:NK,1:NN) => PBUS(PIDX:)
#define MKPTR3D(PNAME,PIDX,NN,PBUS) MKPTR3DN(PNAME,PIDX,ni,nk,NN,PBUS)

#endif
#endif
