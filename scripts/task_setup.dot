#!/bin/bash

#/* Part of the Maestro sequencer software package.
# * Copyright (C) 2011-2015  Canadian Meteorological Centre
# *                          Environment Canada
# *
# * Maestro is free software; you can redistribute it and/or
# * modify it under the terms of the GNU Lesser General Public
# * License as published by the Free Software Foundation,
# * version 2.1 of the License.
# *
# * Maestro is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# * Lesser General Public License for more details.
# *
# * You should have received a copy of the GNU Lesser General Public
# * License along with this library; if not, write to the
# * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# * Boston, MA 02111-1307, USA.
# */


# This script dumps all variables defined in the current
# shell before wrapping a call to task_setup.py.  It should
# be executed in the current shell using `. task_setup.dot [ARGS]`
# where all ARGS are passed directly to the task setup utility.

# Define subroutine to check for matching arguments
checkarg()
{
  thisarg=$1; shift
  var=$1; shift
  patterns=$*
  found=0
  for pattern in ${patterns[*]}; do
    if [[ $(echo $thisarg | cut -c 1-${#pattern}) = $pattern ]] ; then
      eval $var=$(echo $thisarg | cut -c $((${#pattern}+1))-)
      found=1
    fi
  done
  unset thisarg
  unset var
  unset patterns
  unset pattern
}

# Define subroutine to run task_setup.py
launch_setup(){
   arg_varcache=
   if [[ -n "${TS_config_file}" && $(grep -Ec '^\s*#[^#].*`' ${TS_config_file} ) -gt 0 ]] ; then
      task_setup_cachegen ${TS_config_file} ${TS_varcache_file}
      arg_varcache="--varcache ${TS_varcache_file}"
   fi
   (
   while [[ ! -f ${TS_setvar_file} ]] ; do
	  sleep 1
   done
   ) > /dev/null 2>&1
   TASK_SETUP_NOEXEC=$(grep -E '^\s*TASK_SETUP_NOEXEC=' ${TS_setvar_file} | sed 's/.*TASK_SETUP_NOEXEC=//')
   if [[ -n "$TASK_SETUP_NOEXEC" && ${TASK_SETUP_NOEXEC:-0} > 0 ]] ; then
      printf '** skipping TASK_SETUP execution with $TASK_SETUP_NOEXEC=%s **\n' ${TASK_SETUP_NOEXEC}
   else
      printf "** TASK_SETUP begins **\n"
      rm -f ${TS_abort_file}
      task_setup.py --environment=${TS_setvar_file} ${arg_varcache} ${arglist} || touch ${TS_abort_file}
      printf "** TASK_SETUP ends **\n"
   fi
}

# Check command line arguments for the configuration file and task directory
. o.set_array.dot argv $*
TS_config_file=
TASK_BASEDIR=
arglist=
i=0
while [ -n "${argv[$i]}" ] ; do 
  arg=${argv[$i]}
  checkarg $arg 'TS_config_file' '--file=' '-f='
  if [[ ${found} == 1 ]] ; then arg='' ; fi
  if [[ $arg == '-f' || $arg == '--file' ]] ; then TS_config_file=${argv[$i+1]} ; arg='' ; fi
  checkarg ${arg} 'TASK_BASEDIR' '--base=' '-b='
  if [[ $arg == '-b' || $arg == '--base' ]] ; then TASK_BASEDIR=${argv[$i+1]} ; fi
  arglist="${arglist} ${arg}"
  i=$((i+1))
done
if [ -z "${TS_config_file}" ] ; then
  echo "WARNING: task_setup.dot was unable to find a -f or --file argument"
fi
if [ ! -f "${TS_config_file}" ] ; then
  echo "WARNING: task_setup.dot was unable to find specified configuration file "${TS_config_file}
fi
arglist="${arglist} ${TS_config_file}"

# Clean up shell and dot configuration file
export TASK_BASEDIR
unset argv
unset i

# Fork to avoid polluting the task_setup envrionment
TS_setvar_file=${TMPDIR:-/tmp}/task_setup_env$$
TS_varcache_file=${TMPDIR:-/tmp}/task_setup_varcache$$
TS_abort_file=${TMPDIR:-/tmp}/task_setup_abort$$
launch_setup &
TS_setup_thread_pid=$!

# Obtain set namespace and write to a temporary file
if [[ -f ${TS_config_file} ]] ; then . ${TS_config_file} ; fi

# Generate a temporary file containing all set variables
set > ${TS_setvar_file}_locked
mv ${TS_setvar_file}_locked ${TS_setvar_file}

# Continue only after successful task_setup execution
wait ${TS_setup_thread_pid}
rm -f ${TS_setvar_file} ${TS_varcache_file}
if [[ -f ${TS_abort_file} ]] ; then
   rm -f ${TS_abort_file}
   exit 1
fi
rm -f ${TS_abort_file}

# Set up task environment
if [ -n "${TASK_BASEDIR}" ] ; then
  if [[ ! -x `which realpath` ]] ; then
    printf '\nUnable to find realpath in your environment\n' ${TASK_BASEDIR}
    exit 1
  fi
  if [ -d ${TASK_BASEDIR}/bin ] ; then TASK_BIN=$(realpath ${TASK_BASEDIR}/bin); export TASK_BIN ; fi
  if [ -d ${TASK_BASEDIR}/work ] ; then TASK_WORK=$(realpath ${TASK_BASEDIR}/work) ; export TASK_WORK; fi
  if [ -d ${TASK_BASEDIR}/input ] ; then TASK_INPUT=$(realpath ${TASK_BASEDIR}/input) ; export TASK_INPUT; fi
  if [ -d ${TASK_BASEDIR}/output ] ; then TASK_OUTPUT=$(realpath ${TASK_BASEDIR}/output) ; export TASK_OUTPUT; fi
fi
